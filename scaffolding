#!/bin/bash

### BEGIN INIT INFO
# Provides:          scaffolding
# Required-Start:    $syslog $network $named $time $local_fs
# Required-Stop:     $syslog $network $named $time $local_fs
# Default-Start:     3 4 5
# Default-Stop:      5 6
# Short-Description: scaffolding server for nodejs applications
# Description:       It is what it says one line above
### END INIT INFO

DIR=/home/pi/programs/nodejs/Scaffolding
DAEMON=server.coffee
DAEMON_NAME=scaffolding
PIDFILE=/var/run/$DAEMON_NAME.pid
LOGFILE=/var/log/$DAEMON_NAME.log

#colors
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
normal=$(tput sgr0)

init() {
	rm $DIR/error.log 2> /dev/null
}

checkExecution() {
	if [ $? -eq 0 ]; then
		printf "[ %s ]\n" "${green}OK${normal}"
	else
		printf "[ %s ]\n" "${red}FAIL${normal}"
	fi
}

do_start() {
	printf "Starting ${blue}$DAEMON_NAME${normal} service ...\n" $DAEMON_NAME
	printf "%-80s" "... Changing work directory ... "
	cd $DIR 2>> $DIR/error.log
	checkExecution

	printf "%-80s" "... Starting server ... "
	./$DAEMON > $LOGFILE &
	checkExecution

	printf "... Server started with ${yellow}PID: "
	printf $! > $PIDFILE
	printf "%s${normal}\n" "$!"
}

do_stop() {
	printf "Stopping ${blue}$DAEMON_NAME${normal} service ...\n"
	if [ -f "$PIDFILE" ]; then
		APP_PID=$(<$PIDFILE)
		printf "%-80s" "... killing process with ${yellow}PID: $APP_PID${normal}"
		kill $APP_PID 2>> $DIR/error.log
		checkExecution
	else
		printf "Can not find PID file. Service is not running or startup failed."
	fi
}

is_running() {
	local RUNNING=""
	if [ -f "$PIDFILE" ]; then
		APP_PID=$(<$PIDFILE)
		RUNNING=`ps cax | grep $APP_PID`
	fi

	echo "$RUNNING" #empty if not running, not empty if running
}

is_installed() {
	local RES=""
	if [ -f "/etc/init.d/$DAEMON_NAME" ]; then
		RES="installed"
	fi

	echo "$RES" #empty if not installed, not empty if installed
}

INSTALLED=$(is_installed)
RUNNING=$(is_running)

init
case $1 in
	start)
		if [ -n "$INSTALLED" ]; then
			if [ -n "$RUNNING" ]; then
				printf "Service ${blue}$DAEMON_NAME${normal} is already running.\n"
			else
				do_start
			fi
		else
			printf "Service ${blue}$DAEMON_NAME${normal} is not installed.\n"
		fi
		;;
	stop)
		if [ -n "$INSTALLED" ]; then
			if [ -n "$RUNNING" ]; then
				do_stop
			else
				printf "Service ${blue}$DAEMON_NAME${normal} is not running.\n"
			fi
		else
			printf "Service ${blue}$DAEMON_NAME${normal} is not installed.\n"
		fi
		;;
	status)
		if [ -n "$INSTALLED" ]; then
			printf "Service ${blue}$DAEMON_NAME${normal} is installed.\n"
			if [ -n "$RUNNING" ]; then
				printf "Service ${blue}$DAEMON_NAME${normal} is not running.\n"
			else
				printf "Service ${blue}$DAEMON_NAME${normal} is not running.\n"
			fi
		else
			printf "Service ${blue}$DAEMON_NAME${normal} is not installed.\n"
		fi
		;;
	restart)
		do_stop
		do_start
		;;
	install)
		if [ -n "$INSTALLED" ]; then
			printf "Service ${blue}$DAEMON_NAME${normal} is already installed.\n"
		else
			printf "installing ${blue}$DAEMON_NAME${normal} service ... \n"
			printf "%-80s" "... creating symlink ... "
			ln -s $DIR/$DAEMON_NAME /etc/init.d/$DAEMON_NAME 2>> $DIR/error.log
			checkExecution

			printf "%-80s" "... updating rc ... "
			update-rc.d $DAEMON_NAME defaults 2>> $DIR/error.log
			checkExecution
		fi
		;;
	uninstall|remove)
		if [ -n "$INSTALLED" ]; then
			if [ -n "$RUNNING" ]; then
				printf "Service ${blue}$DAEMON_NAME${normal} is running. Stopping server.\n"
				do_stop
			fi

			printf "removing ${blue}$DAEMON_NAME${normal} service ... \n"
			printf "%-80s" "... removing rc ... "
			update-rc.d $DAEMON_NAME remove 2>> $DIR/error.log
			checkExecution

			printf "%-80s" "... removing symlink ... "
			rm /etc/init.d/$DAEMON_NAME 2>> $DIR/error.log
			checkExecution
		else
			printf "Service ${blue}$DAEMON_NAME${normal} is not installed.\n"
		fi
		;;
	*)
		printf 'Usage: service scaffolding start|stop|restart|status|install|remove|uninstall\n'
		printf 'install/remove requires admin rights\n'
		;;
esac

printf "\n"
if [ -s "error.log" ]; then
	printf "Execution finished ${red}with errors${normal}:\n"
	cat error.log
fi

exit 0
